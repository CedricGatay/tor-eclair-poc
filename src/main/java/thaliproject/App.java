/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package thaliproject;

import akka.actor.ActorRef;
import akka.actor.ActorSystem;
import com.msopentech.thali.java.toronionproxy.JavaOnionProxyContext;
import com.msopentech.thali.java.toronionproxy.JavaTorInstaller;
import com.msopentech.thali.toronionproxy.DefaultSettings;
import com.msopentech.thali.toronionproxy.OnionProxyManager;
import com.msopentech.thali.toronionproxy.TorConfig;
import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import fr.acinq.eclair.Kit;
import fr.acinq.eclair.Setup;
import fr.acinq.eclair.io.NodeURI;
import fr.acinq.eclair.io.Peer;
import scala.Option;
import scala.concurrent.Await;
import scala.concurrent.duration.Duration;

import java.io.File;
import java.nio.file.Files;

public class App {

    public static void main(String[] args) throws Exception {

        String fileStorageLocation = "torfiles";
        final TorConfig config = TorConfig.createDefault(Files.createTempDirectory(fileStorageLocation).toFile());
        OnionProxyManager onionProxyManager = new OnionProxyManager(
                new JavaOnionProxyContext(
                        config, new JavaTorInstaller(config), new TestSettings()));

        int totalSecondsPerTorStartup = 4 * 60;
        int totalTriesPerTorStartup = 5;

        onionProxyManager.getTorInstaller().setup();
        onionProxyManager.getTorInstaller().updateTorConfigCustom(
                "ControlPort auto" +
                        "\nControlPortWriteToFile " + config.getControlPortFile() +
                        "\nCookieAuthFile " + config.getCookieAuthFile() +
                        "\nCookieAuthentication 1" +
                        "\nSocksPort 10462");
        // Start the Tor Onion Proxy
        if (onionProxyManager.startWithRepeat(totalSecondsPerTorStartup, totalTriesPerTorStartup, true) == false) {
            return;
        }


        final ActorSystem system = ActorSystem.create("system");
        final File datadir = new File("/tmp", "datadir_name");

// setup and bootstrap the node
        final Config eclairconfig = ConfigFactory.parseString("eclair{ " +
                "chain = testnet\n" +
                "socks5 {\n" +
                "    enabled = true\n" +
                "    host = \"127.0.0.1\"\n" +
                "    port = 10462\n" +
                "    use-for-ipv4 = true\n" +
                "    use-for-ipv6 = true\n" +
                "    use-for-tor = true\n" +
                "    randomize-credentials = false // this allows tor stream isolation\n" +
                "  }" +
                "}");
        final Setup setup = new Setup(datadir, eclairconfig, Option.empty(), Option.empty(), system);
        final Kit kit = Await.result(setup.bootstrap(), Duration.create(60, "seconds"));

        Thread.sleep(30_000);
// connect to the ACINQ node (testnet)
        final NodeURI uri = NodeURI.parse("03933884aaf1d6b108397e5efe5c86bcf2d8ca8d2f700eda99db9214fc2712b134@iq7zhmhck54vcax2vlrdcavq2m32wao7ekh6jyeglmnuuvv3js57r4id.onion:9735");
        kit.switchboard().tell(Peer.Connect$.MODULE$.apply(uri), ActorRef.noSender());


        Thread.sleep(90_000);
        onionProxyManager.stop();
    }
}

class TestSettings extends DefaultSettings {
    @Override
    public boolean hasDebugLogs() {
        //setting this to true allows to get tor executable raw output (useful when debugging a failing launch attempt)
        return false;
    }
}
